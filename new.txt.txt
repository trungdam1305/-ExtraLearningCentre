sonar.projectKey=test3_project
sonar.projectName=Test3
sonar.projectVersion=1.0
sonar.sources=src
sonar.host.url=http://localhost:9000
sonar.login=sqa_fd5349d40c1c0b4db21da9ac8c9c400d0e0554bc
sonar.java.binaries=out/production/Test3


javac -encoding UTF-8 -d out/production/Test3 src\*.java


# Địa chỉ server SonarQube của bạn, ví dụ localhost hoặc IP, port mặc định 9000
sonar.host.url=http://localhost:9000

# Token để đăng nhập (dùng sonar.login với SonarQube server riêng)
sonar.login=sqa_fd5349d40c1c0b4db21da9ac8c9c400d0e0554bc

# Project key bạn đặt trong SonarQube
sonar.projectKey=antoangiaothong

# Thư mục nguồn cần quét
sonar.sources=src/java,web

# Loại trừ thư mục không cần thiết
sonar.exclusions=test/**,target/**,build/**

# Encoding file
sonar.sourceEncoding=UTF-8

sonar.java.binaries=out/production/antoangiaothong



 <script>
            // Lấy ô input tìm kiếm theo ID "searchInput"
            const searchInput = document.getElementById("searchInput");

// Lấy dropdown lọc theo vai trò người dùng theo ID "roleFilter"
            const roleFilter = document.getElementById("roleFilter");

// Lấy phần thân của bảng có ID là "userTable" (tbody)
            const table = document.querySelector("#userTable tbody");

// Lưu tất cả các dòng (tr) của bảng vào mảng allRows
            const allRows = Array.from(table.rows);

// Khởi tạo mảng filteredRows là tất cả các dòng ban đầu
            let filteredRows = allRows;

// Trang hiện tại, bắt đầu từ 1
            let currentPage = 1;

// Số dòng hiển thị mỗi trang
            const rowsPerPage = 7;



            function filterRows() {
                // Lấy từ khóa tìm kiếm (chuyển thành chữ thường để dễ so sánh)
                const keyword = searchInput.value.toLowerCase();

                // Lấy giá trị chọn từ dropdown trạng thái (comment nên không dùng được)
                const status = statusFilter.value;

                // Lấy giá trị chọn từ dropdown vai trò
                const role = roleFilter.value;

                // Lọc các dòng phù hợp
                filteredRows = allRows.filter(row => {
                    const cells = row.querySelectorAll("td"); // Lấy tất cả ô (td) trong dòng

                    // Kiểm tra xem từ khóa có khớp với một trong 4 ô đầu tiên hay không
                    const matchesKeyword = Array.from(cells).slice(0, 4).some(cell =>
                        cell.textContent.toLowerCase().includes(keyword)
                    );

                    // Kiểm tra xem dòng có khớp trạng thái được chọn không
                    const matchesStatus =
                            status === "all" || // Nếu chọn "all" thì luôn đúng
                            (status === "active" && cells[4].textContent.toLowerCase() === "active") || // Nếu chọn "active" thì cột thứ 5 phải là active
                            (status === "inactive" && cells[4].textContent.toLowerCase() !== "active"); // Nếu chọn "inactive" thì cột thứ 5 không được là active

                    // Kiểm tra xem vai trò có khớp không (ở cột thứ 3)
                    const matchesRole =
                            role === "all" || // Nếu chọn "all" thì luôn đúng
                            cells[2].textContent.toLowerCase() === role; // Nếu không thì so sánh chính xác

                    // Chỉ trả về dòng nào thỏa cả 3 điều kiện
                    return matchesKeyword && matchesStatus && matchesRole;
                });

                // Reset lại trang về 1 khi lọc mới
                currentPage = 1;

                // Gọi hàm vẽ lại trang
                renderPage();
            }


            function renderPage() {
                table.innerHTML = ""; // Xóa nội dung bảng cũ

                // Tính chỉ số bắt đầu và kết thúc dòng cho trang hiện tại
                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                // Lấy ra các dòng cần hiển thị trong trang hiện tại
                const pageRows = filteredRows.slice(start, end);

                // Thêm từng dòng vào bảng
                pageRows.forEach(row => table.appendChild(row));

                // Gọi hàm vẽ phân trang
                renderPagination();
            }


            function renderPagination() {
                // Tính tổng số trang dựa vào số dòng được lọc
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

                // Lấy phần tử chứa các nút phân trang
                const pagination = document.getElementById("pagination");
                pagination.innerHTML = ""; // Xóa các nút cũ

                // Tạo nút cho từng trang
                for (let i = 1; i <= totalPages; i++) {
                    const btn = document.createElement("button"); // Tạo nút mới
                    btn.textContent = i; // Gán số trang lên nút

                    // Tô màu nút trang hiện tại
                    btn.style.backgroundColor = (i === currentPage) ? "#1F4E79" : "#ddd";
                    btn.style.color = (i === currentPage) ? "white" : "black";

                    // Khi nhấn vào nút, đổi trang và vẽ lại
                    btn.onclick = () => {
                        currentPage = i;
                        renderPage();
                    };

                    // Thêm nút vào khu vực phân trang
                    pagination.appendChild(btn);
                }
            }

        </script>
