/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import dal.KhoaHocDAO;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.time.LocalDate;
import java.time.LocalDateTime;
import model.KhoaHoc;

/**
 *
 * @author Vuh26
 */
public class ManagerCourse extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet ManagerCourse</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet ManagerCourse at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    KhoaHocDAO kd = new KhoaHocDAO();
    String action = request.getParameter("action");

    if ("deleteCourse".equals(action)) {
        try {
            int id = Integer.parseInt(request.getParameter("ID_KhoaHoc"));

            // L·∫•y kh√≥a h·ªçc t·ª´ DB
            KhoaHoc khoaHoc = KhoaHocDAO.getKhoaHocById(id);

            if (khoaHoc == null) {
                // Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc
                response.sendRedirect(request.getContextPath() + "/views/ManagerCourses2.jsp?message=notFound");
                return;
            }

            String trangThai = khoaHoc.getTrangThai();

            // Ch·ªâ cho ph√©p x√≥a khi tr·∫°ng th√°i l√† "ch∆∞a b·∫Øt ƒë·∫ßu" ho·∫∑c "k·∫øt th√∫c"
            if ("ch∆∞a b·∫Øt ƒë·∫ßu".equalsIgnoreCase(trangThai) || "ƒë√£ k·∫øt th√∫c".equalsIgnoreCase(trangThai)) {
                KhoaHoc deleted = KhoaHocDAO.deleteKhoaHoc(khoaHoc);

                if (deleted != null) {
                    // X√≥a th√†nh c√¥ng
                    response.sendRedirect(request.getContextPath() + "/views/ManagerCourses2.jsp?message=deleted");
                } else {
                    request.setAttribute("err", "Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc v√¨ tr·∫°ng th√°i kh√¥ng ph√π h·ª£p! (Ch·ªâ ƒë∆∞·ª£c x√≥a khi 'ch∆∞a b·∫Øt ƒë·∫ßu' ho·∫∑c 'k·∫øt th√∫c')");
                    request.getRequestDispatcher("/views/ManagerCourses2.jsp").forward(request, response);
                    return;
                }
            } else {
                request.setAttribute("err", "Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc v√¨ tr·∫°ng th√°i kh√¥ng ph√π h·ª£p! (Ch·ªâ ƒë∆∞·ª£c x√≥a khi 'ch∆∞a b·∫Øt ƒë·∫ßu' ho·∫∑c 'k·∫øt th√∫c')");
                request.getRequestDispatcher("/views/ManagerCourses2.jsp").forward(request, response);
                return;
            }

        } catch (NumberFormatException e) {
            request.setAttribute("err", "ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá!");
            request.getRequestDispatcher("/views/ManagerCourses2.jsp").forward(request, response);
            return;
        }
    } else if ("ViewCourse".equals(action)) {
        String id = request.getParameter("ID_KhoaHoc");
        int id_cou = Integer.parseInt(id);
        KhoaHoc khoaHoc = KhoaHocDAO.getKhoaHocById(id_cou);
        request.setAttribute("khoaHoc", khoaHoc);
        request.getRequestDispatcher("/views/ViewCourse.jsp").forward(request, response);
        
    } else if ("UpdateCourse".equals(action)) {
        try {
            int id = Integer.parseInt(request.getParameter("ID_KhoaHoc"));
            KhoaHoc khoaHoc = KhoaHocDAO.getKhoaHocById(id);

            if (khoaHoc == null) {
                response.sendRedirect(request.getContextPath() + "/views/ManagerCourses2.jsp?message=notFound");
                return;
            }

            String trangThai = khoaHoc.getTrangThai();

            // Ch·ªâ cho ph√©p update khi tr·∫°ng th√°i l√† "ch∆∞a b·∫Øt ƒë·∫ßu" ho·∫∑c "k·∫øt th√∫c"
            if ("ch∆∞a b·∫Øt ƒë·∫ßu".equalsIgnoreCase(trangThai) || "ƒë√£ k·∫øt th√∫c".equalsIgnoreCase(trangThai)) {
                // Cho ph√©p v√†o trang c·∫≠p nh·∫≠t, g·ª≠i ƒë·ªëi t∆∞·ª£ng kh√≥a h·ªçc ƒë·ªÉ hi·ªÉn th·ªã form
                request.setAttribute("khoaHoc", khoaHoc);
                request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
            } else {
                // Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t kh√≥a h·ªçc ƒëang ho·∫°t ƒë·ªông ho·∫∑c tr·∫°ng th√°i kh√°c
                request.setAttribute("err", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc v√¨ tr·∫°ng th√°i kh√¥ng ph√π h·ª£p! (Ch·ªâ ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi 'ch∆∞a b·∫Øt ƒë·∫ßu' ho·∫∑c 'k·∫øt th√∫c')");
                request.getRequestDispatcher("/views/ManagerCourses2.jsp").forward(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("err", "ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá!");
            request.getRequestDispatcher("/views/ManagerCourses2.jsp").forward(request, response);
        }
        
    } else {
        // N·∫øu action kh√¥ng h·ª£p l·ªá ho·∫∑c null
        response.sendRedirect(request.getContextPath() + "/views/ManagerCourses2.jsp");
    }
}

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String action = request.getParameter("action");

        if ("submitUpdateCourse".equals(action)) {
            try {
                int id = Integer.parseInt(request.getParameter("ID_KhoaHoc"));
                String ten = request.getParameter("TenKhoaHoc");
                String moTa = request.getParameter("MoTa");

                String batDauStr = request.getParameter("ThoiGianBatDau");
                String ketThucStr = request.getParameter("ThoiGianKetThuc");

                LocalDate batDau = (batDauStr != null && !batDauStr.isEmpty()) ? LocalDate.parse(batDauStr) : null;
                LocalDate ketThuc = (ketThucStr != null && !ketThucStr.isEmpty()) ? LocalDate.parse(ketThucStr) : null;

                String ghiChu = request.getParameter("GhiChu");
                String trangThai = request.getParameter("TrangThai");

                // L·∫•y th√¥ng tin kh√≥a h·ªçc c≈©
                KhoaHoc khoaHocCu = KhoaHocDAO.getKhoaHocById(id);

                // üö´ Kh√¥ng cho ph√©p c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† "Ho·∫°t ƒë·ªông"
                if ("Ho·∫°t ƒë·ªông".equalsIgnoreCase(khoaHocCu.getTrangThai())) {
                    request.setAttribute("err", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc ƒëang ho·∫°t ƒë·ªông!");
                    request.setAttribute("khoaHoc", khoaHocCu);
                    request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
                    return;
                }

                // Ki·ªÉm tra tr√πng t√™n n·∫øu t√™n b·ªã thay ƒë·ªïi
                if (!ten.equalsIgnoreCase(khoaHocCu.getTenKhoaHoc()) && KhoaHocDAO.isTenKhoaHocDuplicate(ten)) {
                    request.setAttribute("err", "T√™n kh√≥a h·ªçc ƒë√£ t·ªìn t·∫°i!");
                    request.setAttribute("khoaHoc", khoaHocCu);
                    request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
                    return;
                }
                
                if (!trangThai.equalsIgnoreCase("ƒë√£ k·∫øt th√∫c") && !trangThai.equalsIgnoreCase("ho·∫°t ƒë·ªông") && !trangThai.equalsIgnoreCase("ch∆∞a b·∫Øt ƒë·∫ßu")) {
                    request.setAttribute("err", "Nh·∫≠p l·∫°i tr·∫°ng th√°i c·ªßa kh√≥a h·ªçc (ƒê√£ k·∫øt th√∫c - ho·∫°t ƒë·ªông - ch∆∞a b·∫Øt ƒë·∫ßu) ");
                    request.setAttribute("khoaHoc", khoaHocCu);
                    request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
                    return;
                }

                // Ki·ªÉm tra ng√†y k·∫øt th√∫c
                if (batDau != null && ketThuc != null && !ketThuc.isAfter(batDau.plusDays(29))) {
                    request.setAttribute("err", "Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu √≠t nh·∫•t 30 ng√†y!");
                    request.setAttribute("khoaHoc", khoaHocCu);
                    request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
                    return;
                }

                // T·∫°o ƒë·ªëi t∆∞·ª£ng kh√≥a h·ªçc m·ªõi
                KhoaHoc khoaHoc = new KhoaHoc(id, ten, moTa, batDau, ketThuc, ghiChu, trangThai, LocalDateTime.now());

                // C·∫≠p nh·∫≠t v√†o DB
                KhoaHoc khoaHocUpdated = KhoaHocDAO.updateKhoaHoc(khoaHoc);

                if (khoaHocUpdated != null) {
                    request.setAttribute("suc", "C·∫≠p nh·∫≠t th√†nh c√¥ng");
                    request.setAttribute("khoaHoc", khoaHocUpdated);
                } else {
                    request.setAttribute("err", "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
                    request.setAttribute("khoaHoc", khoaHoc);
                }

                request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);

            } catch (Exception e) {
                e.printStackTrace();
                request.setAttribute("err", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
                request.getRequestDispatcher("/views/UpdateCourse.jsp").forward(request, response);
            }
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    public static void main(String[] args) {
        KhoaHoc kd = KhoaHocDAO.getKhoaHocById(2);
        System.out.println(kd);
    }
}
